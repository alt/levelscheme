% \iffalse
%<*internal>
%% File: levelscheme.dtx by Arno Trautmann, mail: arno dot trautmann at gmx dot de
\iffalse
%</internal>
%<*readme>
levelscheme tries to offer an easy way of drawing atomic/molecular level schemes in a LaTeX document.

The dtx file has to be compiled with XeLaTeX in order to get the pdf documentation. The package itself can be used with any LaTeX-flavour.

Any comments are welcome! \emph{Please} help me improve this package!

Contact me: arno dot trautmann at gmx dot de.
%</readme>
%<*internal>
\fi
\begingroup
%</internal>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble
EXPERIMENTAL CODE

Do not distribute this file without also distributing the
source files specified above.

Do not distribute a modified version of this file under the same name.

\endpreamble
\postamble
Copyright 2010 Arno Trautmann <arno.trautmann@gmx.de>

Distributed under the LaTeX Project Public License,
verson 1.3c or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "author-maintained" by Arno Trautmann

This work conists of this file levelscheme.dtx
         and the derived files levelscheme.sty
                                  and  levelscheme.pdf.
\endpostamble
\askforoverwritefalse

\generate{\file{levelscheme.sty}{\from{levelscheme.dtx}{levelscheme}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internal>
\generate{\file{levelscheme.ins}{\from{levelscheme.dtx}{batchfile}}}
\nopostamble\nopreamble
\generate{\file{readme.markdown}{\from{levelscheme.dtx}{readme}}}
\endgroup
%</internal>
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage[english]{babel}
\usepackage{
  hyperref,
  xltxtra
}

\hypersetup{%
  pdfborder= 0 0 0,
  colorlinks=true,
  linkcolor= blue,
  pdftitle=levelscheme
}

\def\filedate{2010/06/19}
\def\fileversion{0.a}

\title{The \textsf{levelscheme} package}
\author{Arno L. Trautmann\thanks{arno.trautmann@gmx.de}}
\date{Version \fileversion\ \filedate}

\EnableCrossrefs
\CodelineIndex
\RecordChanges

\usepackage{ifthen}
%\OnlyDescription
\begin{document}
\maketitle
This is the package |levelscheme| which tries to offer an easy way of drawing atomic/molecular level schemes in a LaTeX document.
 
Any comments are welcome! \emph{Please} help me improve this package!
\tableofcontents
\newpage
\part{Documentation}
\section{Introduction}
\section{Usage}
\StopEventually{}
\clearpage

\part{Implementation: levelscheme.sty}

\DocInput{levelscheme.dtx}
\end{document}
%</driver>
%<*levelscheme>
% \fi
% Ok, enough blahblah, now comes the code. We begin with preamble stuff:
%    \begin{macrocode}
\ProvidesPackage{levelscheme}
  [2010/06/19 v 0.a atomic/molecular level schemes]
\RequirePackage{
  expl3,
  forloop,
  tikz,
  xparse
}

\usetikzlibrary{%
	arrows,%
	decorations.pathmorphing,%
	positioning%
}
%    \end{macrocode}
% \subsection{Keys}
% keys:
%    \begin{macrocode}
\ExplSyntaxOn
\keys_define:nn{ls_trans}{
  dir.code:n = \tl_set:Nn\ls_trans_dir{#1},
  right.meta:n = {dir=right},
  left.meta:n = {dir=left},
%
  loc.code:n = \tl_set:Nn\ls_trans_loc{#1},
%
  pos.code:n = \tl_set:Nn\ls_trans_pos{#1},
  midway.meta:n = {pos=midway},
  near~end.meta:n = {pos=near~end}
}
\ExplSyntaxOff
%% all keys defined, now nice interface:
\ExplSyntaxNamesOn
%% intern command to set keys (misc)
%% this here needs clean up!
\cs_new:Nn\ls_setkeys:n{%
  \keys_set:nn{ls}{#1}%
}%

%% intern command to set keys (transitions only)
\cs_new:Nn\ls_setkeys_trans:n{%
  \keys_set:nn{ls_trans}{#1}
}

%% user level wrapper, only for misc
\NewDocumentCommand\lssetkeys{o m}{%
  \IfNoValueTF{#1}
    {\ls_setkeys:n{#2}}
    {\keys_set:nn{ls_#1}{#2}}
}
%    \end{macrocode}
%\subsection{Constants and Variables}
% setting up constants/varibles.
%    \begin{macrocode}
\DeclareExpandableDocumentCommand\levellength{}{2}
\cs_new:Nn\ls_leveldistance:{1}

\DeclareExpandableDocumentCommand\photonlength{}{2.5}
\DeclareExpandableDocumentCommand\finestructlength{}{2}

\int_new:c{levelnr}
\int_new:c{transdist}
\int_new:c{HOlevel}

\tl_gset:Nn\c_ls_right{right}

\newcounter{sublevel}  %% here for the for-loop anywhere, as that package does not get clear with expl3-counts

\int_gset:cn{levelnr}{1}
\int_gset:cn{transdist}{1}
%    \end{macrocode}
% User level macros to set them
%    \begin{macrocode}
\DeclareDocumentCommand\leveldistance{m}{
  \renewcommand\ls_leveldistance:{#1}
}

\DeclareDocumentCommand\sublevellength{}{2}
\cs_new:Nn\ls_subleveldistance:{1}

\DeclareDocumentCommand\subleveldistance{m}{
  \cs_set:Nn\ls_subleveldistance:{#1}
}

%    \end{macrocode}
% \subsection{Level Scheme}
% This is the main environment of this package, and almost everything elese is based on this. Mostly, it is just a wrapper for a |tikzpicture| with some settings.
%    \begin{macrocode}
\DeclareDocumentEnvironment{levelscheme}{O{}}
	{\begin{tikzpicture}[#1,inner sep=0mm,>=stealth]%
	\node (lastlevel) at (0,0){};%
}
	{\end{tikzpicture}}

\DeclareDocumentCommand\level{O{}m}{
\begin{scope}[node distance = \ls_leveldistance: and \levellength]
  \node (#2) [below=of lastlevel] {\llap{#1}};
  \node (#2-2) [right=of #2] {};
  \node (#2-3) [right=of #2-2] {};
  \draw (#2.center) -- (#2-3.center);
  \node (lastlevel) at (#2) {};
  \node (lastlevel-3) at (#2-3){};
  \int_set:cn{transdist}{1}
\end{scope}
}
%    \end{macrocode}
% A number of sublevels of given distances
%    \begin{macrocode}
\DeclareDocumentCommand\sublevels{O{lastlevel-3}mm}
{
  \node (sublevelstart) [right=of #1.center]{};
  \foreach \x in {#3}{%
    \node (#2-\x) [%
      node distance= \x*\ls_subleveldistance:,%
      above=of sublevelstart.south%
      ]{};
    \draw (#1.center) -- (#2-\x.center) -- +(2,0) node (end-#2-\x) {\hbox to 2em{\hfill \x}};
  }
}
%    \end{macrocode}
% For a Zeeman splitting: First argument gives the number of splitted levels, the second argument gives the relative splitting (in units of |ls@leveldistance|). Nop,this is not the correct docu …
%    \begin{macrocode}
\DeclareDocumentCommand\transition{O{} mmm}{
%% evaluate keys
  \ls_setkeys_trans:n{loc=\int_use:c{transdist},midway}  %% bit of a strange but necessary way to define a default
  \ls_setkeys_trans:n{#1}
%% construct nodes
  \node (translow) [node distance = \ls_trans_loc ,right=of #2] {};
  \node (transup) [node distance = \ls_trans_loc,right=of #3] {};

%% draw the thing and define a center at which the photon ends
  \draw [->] (translow.center) -- (transup.center) node (photonend)[\ls_trans_pos]{};

%% calculate the beginning of the photon
  \tl_if_eq:NNTF\ls_trans_dir\c_ls_right  %% does the photon come from right or left?
    {\node [node distance = \photonlength](photonstart) [right=of photonend] {};}
    {\node [node distance = \photonlength](photonstart) [left=of photonend]   {};}
  \photon[#4]{photonstart}{photonend};  %% no matter what left or right …
  \int_incr:c{transdist}
}

%% a set of sublevels at constant distances
\NewDocumentCommand\finestruct{mmm}{
  \int_set:cn{transdist}{0}
  \node (finestart) [right=of lastlevel-3]{};
  \forLoop{1}{#1}{sublevel}{
    \node (#3-\thesublevel) [%
      node distance= #2*(-#1/2+(\thesublevel-.5)),%
      above=of finestart.south%
      ]{};
  \draw (lastlevel-3.center) to (#3-\thesublevel.center) -- +(2,0) node (end-#3-\thesublevel) {};
  }
}

\NewDocumentCommand\shifttrans{m}{
  \int_add:cn{transdist}{#1}
}

\NewDocumentCommand\photon{O{->}mm}{
  \draw [#1,decorate,decoration={snake,pre length=6pt,post length=2pt}] (#2) -- (#3);
}

\NewDocumentCommand\absorb{O{midway,dir=left}mm}{
  \transition[#1]{#2}{#3}{->}
}

\NewDocumentCommand\emit{O{midway,dir=right}mm}{
  \transition[#1]{#2}{#3}{<-}
}

\NewDocumentCommand\indemit{O{midway,dir=right}mm}{
  \transition[#1]{#2}{#3}{<-}
  \photon{1,1}{2,2}
%% TODO
}

\NewDocumentCommand\relaxation{mm}{
%% TODO
}
%    \end{macrocode}
% \section{Potentials}
%The macros presented in this section enable you to draw some of the typical potentials needed in atomic and molecular physics. Plans are to implement a hormonic potential, Morse potential, Lennard-Jones potential, a gaussian potential (optical dipole trap) and a linear potential. This is \emph{not} intended for rigorous calculations and scientific things, just for sketching. If you need exakt forms of potentials and level distances, go for a professional program.
%\subsection{MOT}
%    \begin{macrocode}
\NewDocumentCommand\MOT{}{
\begin{levelscheme}
  \level{MOT-upper}
  \level{MOT-lower}
  \absorb[loc=0.25*\levellength]{MOT-lower}{MOT-upper}
  \absorb[right,loc=1.75*\levellength]{MOT-lower}{MOT-upper}
\end{levelscheme}
}

%\subsection{Harmonic Oszillator}
\NewDocumentCommand\HOhight{}{0.5}
\NewDocumentCommand\HOwidth{}{0.5}

\NewDocumentCommand\HO{O{5}m}{
\begin{tikzpicture}[domain=-2:2]
  \draw plot (\x,\x^2*\HOwidth){};
  \forLoop{0}{#1}{HOlevel}{
    \def\HOL{{(\theHOlevel+0.5)*\HOhight}}
    \draw ({sqrt(\HOL/\HOwidth)},\HOL) -- ({-sqrt(\HOL/\HOwidth)},\HOL){};
  }
\end{tikzpicture}}
%    \end{macrocode}
%\subsection{Lennard-Jones potential}
%    \begin{macrocode}
\NewDocumentEnvironment{lennardjones}{}
{\begin{tikzpicture}[domain=1.0:4]
\draw plot[smooth] (\x,5*{(\x^(-12))-5*(\x^(-6))}){};
}
{\end{tikzpicture}}
%    \end{macrocode}
%\subsection{Morse potential}
%    \begin{macrocode}
\NewDocumentEnvironment{morsepotential}{}
{\begin{tikzpicture}[domain=0:5]
\draw plot[smooth] 	(\x,{(1*(1-exp(-0.7*(\x*2-1))))^2}){};
}
{\end{tikzpicture}}

\ExplSyntaxNamesOff
%    \end{macrocode}
% \section{Known Bugs}
% This should be a list of serious bugs. Please report any of them to me!
% \begin{itemize}
% \item ?
% \end{itemize}
% \newpage\appendix
% \section*{todo}
% Here a section with some ideas that could be implemented.
% \begin{itemize}
% \item Implement a whole MOT-scheme
% \end{itemize}
% \iffalse
%</levelscheme>
% \fi
% \Finale
\endinput
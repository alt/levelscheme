% \iffalse
%<*internal>
%% File: levelscheme.dtx by Arno Trautmann, mail: arno dot trautmann at gmx dot de
\iffalse
%</internal>
%<*readme>
levelscheme tries to offer an easy way of drawing atomic/molecular level schemes in a LaTeX document.

The dtx file has to be compiled with XeLaTeX in order to get the pdf documentation. The package itself can be used with any up-to-date LaTeX-flavour.

Any comments and suggestions are welcome! Help me improve this package!

Contact me: arno dot trautmann at gmx dot de.
%</readme>
%<*internal>
\fi
\begingroup
%</internal>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble
EXPERIMENTAL CODE

Do not distribute this file without also distributing the
source files specified above.

Do not distribute a modified version of this file under the same name.

\endpreamble
\postamble
Copyright 2010 Arno Trautmann <arno.trautmann@gmx.de>

Distributed under the LaTeX Project Public License,
verson 1.3c or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "author-maintained" by Arno Trautmann

This work conists of this file levelscheme.dtx
         and the derived files levelscheme.sty
                                  and  levelscheme.pdf.
\endpostamble
\askforoverwritefalse

\generate{\file{levelscheme.sty}{\from{levelscheme.dtx}{levelscheme}}}
\generate{\file{levelscheme-example.tex}{\from{levelscheme.dtx}{example}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internal>
\generate{\file{levelscheme.ins}{\from{levelscheme.dtx}{batchfile}}}
\nopostamble\nopreamble
\generate{\file{readme.markdown}{\from{levelscheme.dtx}{readme}}}
\endgroup
%</internal>
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage[english]{babel}
\usepackage{
  hyperref,
  xltxtra
}

\hypersetup{%
  pdfborder= 0 0 0,
  colorlinks=true,
  linkcolor= blue,
  pdftitle=levelscheme
}

\def\filedate{2010/06/27}
\def\fileversion{0.a1}

\title{The \textsf{levelscheme} package}
\author{Arno L. Trautmann\thanks{arno.trautmann@gmx.de}}
\date{Version \fileversion\ \filedate}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\usepackage{
  array,
  levelscheme,
  showexpl
}

\lstset{%
  backgroundcolor=\color[rgb]{.9 .9 .9},
  basicstyle=\ttfamily\small,
  breakindent=1em,
  breaklines=true,
  captionpos=b,
  numbers=none,
  frame=tlbr,
  frameround=tttt,
  rframe=,
  pos=l,
  explpreset={preset=\vspace*{-9ex}}
}

%\OnlyDescription
\begin{document}
\maketitle
This is the package |levelscheme| which tries to offer an easy way of drawing atomic/molecular level schemes with transitions in a \LaTeX document.
 
Any comments are welcome! Please help me improve this package!
\tableofcontents
\newpage
\part{Documentation}
\section{Introduction}
This package aims to provide an easy and fast way to draw atomic level schemes. It is designed for theses in the atomic, molecular or quantum optical sciences to help quickly sketch the idea of a certain (experimental) situation. |levelscheme| is \emph{not} intended to offer rigorous calculations and exact potential forms etc. It is just an alternative to drawing things in Paint.

\section{Usage}
You draw levels by using e.\,g. |\level|, give them names and labels and connect them via physical meaningful transitions:
\begin{LTXexample}[caption=A simple example.]
\begin{levelscheme}
\level[1]{A}
\virtuallevel[3]{B}
\level[2]{C}
\absorb BA
\shifttrans{-1}
\absorb BC
\nophotoncycle[no,near end] AC
\end{levelscheme}
\end{LTXexample}

Everything can be adapted to your needs: arrow directions, photon length and direction, positions, distances etc. by using few and quite intuitive commands. All command names are inspired by what they describe, so there is no „line with arrows at both sides“ but rather |\cycle| for „cycling transition“.

\subsection{Main Commands}
There are three classes of commands: Such that represent levels, commands for transitions and potential commands or environments, respectively.

\subsubsection{level}
To allow transitions between levels, every level must have a unique name. This name is given as the mandatory argument of the |\level| command. The optional argument in brackets is a label that will be printed next to the level bar. You can give arbitrary names and labels, of course.

\DescribeMacro{\level[]\{\}}
Draws a line that represents an energy level. Takes two arguments, the second being the unique name of the level. The first argument is optional and contains a label to be printed next to the level.
\DescribeMacro{\virtuallevel[]\{\}}
Same as above, but with a dashed line to depict a virtual level.

\DescribeMacro{\sublevels\{level\}\{-1,-5,3,4\}}
This command draws a bunch of sublevels. These will be right of the given ”main level“ (here |second|) and vertically shifted with respect to that one by the given numbers.

\begin{LTXexample}[preset={\sublevelwidth{1}\levelwidth{0.5}}]
\begin{levelscheme}
\level{A}
\sublevels{A}{-1,0,1,1.5}
\end{levelscheme}
\end{LTXexample}
\subsubsection{transitions}
There are many kinds of possible transitions. For most of them there are special commands. All of them can be adjusted by means of options given in brackets. |\cyle[no]| denotes a forbidden cycling transition. For possible options see section \ref{sec:options}.

All transition commands take three arguments: The first one is an optional argument taking key or key-value pairs. The second and third argument denote the starting and ending level, respectively.

\DescribeMacro{\absorb[]\{\}\{\}}
Depicts an absorption process, i.\,e. an arrow directing from the first level to the second one with a photon running ”inwards“.


\DescribeMacro{\emit[]\{\}\{\}}
Same as above, emits a photon.

\DescribeMacro{\cycle[]\{\}\{\}}
Connects two states via an bidirectional arrow, with a photon.

\DescribeMacro{\nophotoncycle[]\{\}\{\}}
Dito, without a photon.

\DescribeMacro{\emit[]\{\}\{\}}

\DescribeMacro{\transition*[]\{\}\{\}}

\subsubsection{Potentials}
This package is able to draw several important potentials and to insert levels. They might be at arbitrary positions or even have the correct hight (as in the case of the harmonic oszillator).

\DescribeMacro{HO[]\{\}}
This makro draws a harmonic oszillator, i.\,e. a parabola with equidistant levels and an offset of half the level distance. The first argument gives the number of levels (default are four). The second argument is not used so far.

\subsection{Options}
\label{sec:options}
Most of the commands can be tuned to fit the user’s needs. This is mostly done by a key-value interface, but also some macros are used to set important variables. This all will most probably change in the near future, so no documentation so far.

\StopEventually{}
\clearpage

\part{Implementation: levelscheme.sty}

\DocInput{levelscheme.dtx}
\end{document}
%</driver>
%<*levelscheme>
% \fi
% \setcounter{section}{0}
% \section{Preamble}
% Preamble stuff, package loading. We use |xparse| due to superior macro definition as well as |expl3| (required by xparse) to get the nice |l3keys|.
% 
% Last, special tikz-libraries for arrows etc.
%    \begin{macrocode} 
\ProvidesPackage{levelscheme}
  [2010/06/27 v 0.a1 atomic/molecular level schemes]
\RequirePackage{
  forloop,
  tikz,
  xparse
}
\usetikzlibrary{%
	arrows,%
	decorations.pathmorphing,%
	positioning%
}
\usepgflibrary{%
	shapes.misc%
}
\ExplSyntaxOn
%    \end{macrocode}
% \section{Keys}
% keys:
%    \begin{macrocode}
\keys_define:nn{ls_trans}{
  dir.code:n = \tl_set:Nn\ls_trans_dir{#1},
  right.meta:n = {dir=right},
  left.meta:n = {dir=left},
% kind of arrows used
  arrow.code:n = \tl_set:Nn\ls_trans_arrow{{#1}},
  {<->}.meta:n = \tl_set:Nn\ls_trans_arrow{{<->}},
%  location of the transition relative to the previous transition (kind of)
  loc.code:n = \tl_set:Nn\ls_trans_loc{#1},
%
  pos.code:n = \tl_set:Nn\ls_trans_pos{#1},
  midway.meta:n = {pos=midway},
  near~end.meta:n = {pos=near~end},
  near~start.meta:n = {pos=near~start},
  no.code:n = \bool_set_false:N\ls_trans_allowed,
  not~allowed.meta:n = {no},
  yes.code:n = \bool_set_true:N\ls_trans_allowed
}

\keys_define:nn{ls_pot}{
  domain.code:n = \tl_set:Nn\ls_pot_domain{#1}
}
%    \end{macrocode}
% Interface for setting keys:
% intern command to set keys (all keys)
% this here needs some clean-up.
%    \begin{macrocode}
\cs_new:Nn\ls_setkeys:n{%
  \keys_set:nn{ls}{#1}%
}%
%    \end{macrocode}
% intern command to set keys (transitions only)
%    \begin{macrocode}
\cs_new:Nn\ls_setkeys_trans:n{%
  \keys_set:nn{ls_trans}{#1}
}
%    \end{macrocode}
% user level command
%    \begin{macrocode}
\NewDocumentCommand\lssetkeys{o m}{%
  \IfNoValueTF{#1}
    {\ls_setkeys:n{#2}}
    {\keys_set:nn{ls_#1}{#2}}
}
%    \end{macrocode}
%\section{Constants and Variables}
% setting up constants/varibles with default values.
%    \begin{macrocode}
\bool_new:N\ls_trans_allowed

\tl_gset:Nn\c_ls_right{right}

\tl_set:Nn\ls_levelwidth{2}
\tl_set:Nn\ls_leveldistance{1}

\tl_set:Nn\ls_sublevelwidth{1}
\tl_set:Nn\ls_subleveldistance{0.5}

\tl_set:Nn\ls_trans_not_width{2em}
\tl_set:Nn\ls_trans_not_height{2ex} %% not yet used

\tl_set:Nn\ls_level_style{}
\tl_set:Nn\ls_trans_decorate_i{}  %% FIXME: please remove this using a meaningful way to pass several options with one macro
\tl_set:Nn\ls_trans_decorate_ii{}

\int_new:c{transdist}  %% must be changed to some floating number!
\int_gset:cn{transdist}{1}
\int_new:c{ls_trans_shift}  %% must be changed to some floating number!
\int_gset:cn{ls_trans_shift}{1}

\tikzset{ls-decoration/.style={decorate,decoration={snake}}}

\DeclareExpandableDocumentCommand\photonlength{}{1.5}
\DeclareExpandableDocumentCommand\finestructlength{}{2}

\newcounter{finestruct}  %% here for the for-loop anywhere, as that package does not get clear with expl3-counts
\newcounter{HOlevel}   %% here for the for-loop in the harmonic oszillator

%    \end{macrocode}
% User level macros to set them
%    \begin{macrocode}
\DeclareDocumentCommand\leveldistance{m}{
  \tl_gset:Nn\ls_leveldistance{#1}
}
\DeclareDocumentCommand\levelwidth{m}{
  \tl_gset:Nn\ls_levelwidth{#1}
}

\DeclareDocumentCommand\sublevelwidth{m}{
  \tl_gset:Nn\ls_sublevelwidth{#1}
}

\DeclareDocumentCommand\subleveldistance{m}{
  \tl_gset:Nn\ls_subleveldistance{#1}
}
\ExplSyntaxOff
%    \end{macrocode}
% \section{Level Scheme}
% This is the main environment of this package, and almost everything elese is based on this. Mostly, it is just a wrapper for a |tikzpicture| with some settings.
%    \begin{macrocode}
\ExplSyntaxNamesOn
\DeclareDocumentEnvironment{levelscheme}{O{}}
{
  \begin{tikzpicture}[#1,inner sep=0mm,>=stealth]%
    \node (lastlevel) at (0,0){};%
}
{
  \end{tikzpicture}
}
% 
\DeclareDocumentCommand\level{O{}m}{
  \begin{scope}[node distance = \ls_leveldistance and \ls_levelwidth]
    \node (#2) [below=of lastlevel] {\llap{#1\ }};
    \node (#2-2) [right=of #2] {};
    \node (#2-3) [right=of #2-2] {};
    \draw [\ls_level_style] (#2.center) -- (#2-3.center);
    \node (lastlevel) at (#2) {};
    \node (lastlevel-3) at (#2-3){};
    \int_set:cn{transdist}{1}  %% return to normal distance
  \end{scope}
}

\DeclareDocumentCommand\virtuallevel{O{}m}{
  \tl_set:Nn\ls_level_style{dashed}
  \level[#1]{#2}
  \tl_set:Nn\ls_level_style{}
}

\DeclareDocumentCommand\nolevel{O{}m}{
  \tl_set:Nn\ls_level_style{white}
  \level[#1]{#2}
  \tl_set:Nn\ls_level_style{}
}
%    \end{macrocode}
% A number of sublevels of given distances
%    \begin{macrocode}
\DeclareDocumentCommand\sublevels{O{lastlevel-3}mm}
{
  \node (sublevelstart) [right=of #1.center]{};
  \foreach \x in {#3}{%
    \node (#2-tmp) [%
      node distance= \x*\ls_subleveldistance,%
      above=of sublevelstart.south%
      ]{};
    \draw (#1.center) -- (#2-tmp.center) -- +(\ls_sublevelwidth,0) node (end-#2-tmp) {\hbox to 2em{\hfill}};
  }
}
%    \end{macrocode}
% An attempt to implement the possibility to use several columns of levels, e.\,g. for para- and ortho-Helium. Not yet useable.
%    \begin{macrocode}
\DeclareDocumentCommand\levelcolumns{m}
{
  \tikz{node distance = 0.9 and 0.9}
  \tl_set:Nn\ls_levelwidth{0.8}
  \node (columnuppernode) at (lastlevel) {};
  \node (columnuppernode-2) [right=of columnuppernode] {};
  \node (columnuppernode-3) [right=of columnuppernode-2] {};
}
\DeclareDocumentCommand\nextlevelcolumn{}
{
  \node (columnuppernode) [right=of columnuppernode-3]{};
  \node (columnuppernode-2) [right=of columnuppernode] {};
  \node (columnuppernode-3) [right=of columnuppernode-2] {};
  \node (lastlevel) at (columnuppernode) {};
}
%    \end{macrocode}
% a set of sublevels at constant distances
% \begin{macro}{finestruct}
%    \begin{macrocode}
\NewDocumentCommand\finestruct{mmm}{
  \int_set:cn{transdist}{0}
  \node (finestart) [right=of lastlevel-3]{};
  \forLoop{1}{#1}{finestruct}{
    \node (#3-\thefinestruct) [%
      node distance= #2*(-#1/2+(\thefinestruct-.5)),%
      above=of finestart.south%
      ]{};
  \draw (lastlevel-3.center) to (#3-\thefinestruct.center) -- +(2,0) node (end-#3-\thefinestruct) {};
  }
}
%    \end{macrocode}
% \end{macro}
% \subsection{Transitions}
% A transition. This is kind of the basic macro for nearly everything interesting. I hope it is configurable enough to be really useful. However, key-value is as expandable as one wishes, so the first argument is a key-value list for everyeverything.
%    \begin{macrocode}
\DeclareDocumentCommand\transition{sO{}O{}mmm}{
  \ls_setkeys_trans:n{%
      loc=\int_use:c{transdist},midway,arrow={->},yes, %% default values
   #2}  %% user values
%
%% construct nodes and draw the thing, define a center at which the photon ends
%
  \node (translow) [node distance = \ls_trans_loc ,right=of #4] {};
  \node (transup) [node distance = \ls_trans_loc,right=of #5] {};
  \draw [\ls_trans_arrow,#3] (translow.center) -- (transup.center) node (photonend)[\ls_trans_pos]{};
%
%% calculate the beginning of the photon, depending wether it comes/goes to/from left or right
%
  \IfBooleanTF{#1}{}{ %% is there a photon in this transition? i.e. no star given
  \tl_if_eq:NNTF\ls_trans_dir\c_ls_right  %% does the photon come from right or left?
      {\node [node distance = \photonlength](photonstart) [right=of photonend] {};}
      {\node [node distance = \photonlength](photonstart) [left=of photonend]   {};}
    \photon[#6]{photonstart}{photonend};
  }
  \bool_if:NF\ls_trans_allowed{
    \node [cross out,draw = black] (notallowed) at (photonend)
              {\hspace*{\ls_trans_not_width}\strut};
  }
%
  \int_add:Nn\transdist{\ls_trans_shift}  %% and shift the next transition so they will not overlap. Has to be adjusted for left/right
}
%    \end{macrocode}
% for shifting/not shifting the transitions by hand
%    \begin{macrocode}
\NewDocumentCommand\shifttrans{m}{
  \int_add:cn{transdist}{#1}
}
\NewDocumentCommand\shiftdist{m}{
  \int_gset:cn{ls_trans_shift}{#1}
}
\NewDocumentCommand\stopshift{}{
  \int_gset:cn{ls_trans_shift}{0}
}
%    \end{macrocode}
% a transition with arrows at both sides to indicate that a cyled transition is meant; with or without photon
%    \begin{macrocode}
\NewDocumentCommand\cycle{O{}mm}{
  \transition*[#1,arrow={<->}]{#2}{#3}{}
}
\NewDocumentCommand\photoncycle{O{}mm}{
  \transition[#1,arrow={<->}]{#2}{#3}{->}
}
\NewDocumentCommand\nophotoncycle{O{}mm}{
  \transition*[#1,arrow={<->},no]{#2}{#3}{->}
}
%    \end{macrocode}
% a single photon from node 1 to node 2
%    \begin{macrocode}
\NewDocumentCommand\photon{O{->}mm}{
  \draw [#1,decorate,decoration={snake,pre length=6pt,post length=2pt}] (#2) -- (#3);
}
%    \end{macrocode}
% absorbtion of a photon, a special transition
%    \begin{macrocode}
\NewDocumentCommand\absorb{O{midway,dir=left}mm}{
  \transition[#1]{#2}{#3}{->}
}
%    \end{macrocode}
% emission of a photon, another special transition
%    \begin{macrocode}
\NewDocumentCommand\emit{O{midway,dir=right}mm}{
  \transition[#1]{#2}{#3}{<-}
}
%    \end{macrocode}
% induced emission as needed for a laser. Not yet implemented.
%    \begin{macrocode}
\NewDocumentCommand\indemit{O{midway,dir=right}mm}{
  \transition[#1]{#2}{#3}{<-}
  \photon{1,1}{2,2}
%% TODO
}
%    \end{macrocode}
% photonless transition
%    \begin{macrocode}
\NewDocumentCommand\relaxation{O{midway,dir=right}mm}{
  \transition*[#1][ls-decoration]{#2}{#3}{<-}
}
%    \end{macrocode}
% \subsection{$\Lambda$ scheme}
% The environment |lambdascheme| is usefull to draw a $\Lambda$ shaped niveau system. For example, use it to depicture the EIT effect.
%    \begin{macrocode}
\NewDocumentEnvironment{lambdascheme}{}
  {\begin{levelscheme}
    \tl_set:Nn\ls_levelwidth{1}
    \tl_set:Nn\ls_lambdaApos{1.5,4}
    \tl_set:Nn\ls_lambdaBpos{3,1}
    \tl_set:Nn\ls_lambdaCpos{0,0}
    \node (lastlevel) at (\ls_lambdaApos){};
    \level{lambda-A}
    \node (lastlevel) at (\ls_lambdaBpos){};
    \level{lambda-B}
    \node (lastlevel) at (\ls_lambdaCpos){};
    \level{lambda-C}
    \cycle{lambda-C}{lambda-A}
    \shifttrans{-\ls_levelwidth}
    \cycle{lambda-B}{lambda-A}
  }
  {\end{levelscheme}}
%    \end{macrocode}
% \subsection{Zooming in}
% For some cases it is helpfull to draw an overview of the levels on the left-hand side of a scheme, and a zoomed version of an interesting part on the right-hand side. (e.\,g. rotational sublevles of vibrational states)
%    \begin{macrocode}
\DeclareDocumentCommand\zoomlevels{mm}
{
%  \node (lastlevel) [right=of (lastlevel-3)] {};
  \node (lastlevel) at (#1-3) [above right=1 and 2] {};
  \leveldistance{0}
  \level{zoomed-#1}
  \node (lastlevel) at (#2-3) [below right=1 and 2] {};
  \leveldistance{0}
  \level{zoomed-#2}
  \draw[dashed] (#1-3) -- (zoomed-#1);
  \draw[dashed] (#2-3) -- (zoomed-#2);
  \node (lastlevel) at (zoomed-#1) {};
}
%    \end{macrocode}
% \section{Potentials}
%The macros presented in this section enable you to draw some of the typical potentials needed in atomic and molecular physics. Plans are to implement a hormonic potential, Morse potential, Lennard-Jones potential, a gaussian potential (optical dipole trap) and a linear potential. This is \emph{not} intended for rigorous calculations and scientific things, just for sketching. If you need exakt forms of potentials and level distances, go for a professional program.
%\subsection{MOT}
%    \begin{macrocode}
\NewDocumentCommand\MOT{}{
\begin{levelscheme}
  \level{MOT-upper}
  \tl_set:Nn\ls_motdistance{0.95}
  \node (MOT-plus-right) [node distance=\ls_motdistance,above = of MOT-upper-3] {};
  \node (MOT-plus-left) [node distance=\ls_motdistance,below = of MOT-upper] {};
  \node (MOT-minus-right) [node distance=\ls_motdistance,below = of MOT-upper-3] {};
  \node (MOT-minus-left) [node distance=\ls_motdistance,above = of MOT-upper] {};
% 
  \leveldistance{0.5}
  \virtuallevel{MOT-middle}
  \leveldistance{3}
  \level{MOT-lower}
%
  \draw (MOT-plus-left) -- (MOT-plus-right);
  \draw (MOT-minus-left) -- (MOT-minus-right);
  \absorb[loc=0.3*\ls_levelwidth]{MOT-lower}{MOT-middle}
  \absorb[right,loc=1.7*\ls_levelwidth]{MOT-lower}{MOT-upper}
\end{levelscheme}
}
%    \end{macrocode}
% \subsection{Harmonic Oszillator}
%    \begin{macrocode}
\tl_set:Nn\lsHOhight{0.5}
\tl_set:Nn\lsHOwidth{0.5}

\group_begin:
  \char_set_lccode:nn { `\! } { `\: }
  \char_make_other:N \!
\tl_to_lowercase:n {
  \group_end:
  \cs_new:Npn\setdomains#1#2{
  \pgfkeys {tikz/domain = #1 ! #2}
  }
}

\NewDocumentCommand\HO{O{4}m}{
\setdomains{-2}{2}
  \begin{tikzpicture}
    \draw plot (\x,{\x^2*\lsHOwidth}){};
    \forLoop{0}{#1}{HOlevel}{
      \def\HOL{{(\theHOlevel+0.5)*\lsHOhight}}
      \draw ({sqrt(\HOL/\lsHOwidth)},\HOL) -- ({-sqrt(\HOL/\lsHOwidth)},\HOL){};
  }
  \end{tikzpicture}
}
%    \end{macrocode}
%\subsection{Lennard-Jones potential}
%    \begin{macrocode}
  \DeclareDocumentCommand\potlevel{m}{
    \def\potlevelleft{%
      {2^(1/6)/\ljSigma*((sqrt(\ljEpsilon^2+#1*\ljEpsilon)/#1) - (\ljEpsilon/#1))^(1/6)-0.03*#1}% %% WTF correction summand needed?!?
    }
    \def\potlevelright{
      {2^(1/6)/\ljSigma*((-sqrt(\ljEpsilon^2+#1*\ljEpsilon)/#1) - (\ljEpsilon/#1))^(1/6)}%
    }
    \draw (\potlevelleft,#1) -- (\potlevelright,#1){};
}
\NewDocumentEnvironment{lennardjones}{mm}
{
  \gdef\ljEpsilon{#1}
  \gdef\ljSigma{#2}
  \setdomains{1}{4}
  \begin{tikzpicture}
  \draw plot[smooth] (\x,{4*\ljEpsilon*((\ljSigma*\x)^(-12)-(\ljSigma*\x)^(-6))}){};
}{
  \end{tikzpicture}
}
\ExplSyntaxNamesOff
%    \end{macrocode}
%\subsection{Morse potential}
%    \begin{macrocode}
\NewDocumentEnvironment{morsepotential}{O{}}
{
%%%  \ls_setkeys_potential{#1}
  \begin{tikzpicture}[domain=1:3]
    \draw plot[smooth] (\x,{(1*(1-exp(-0.7*(\x*2-1))))^2}){};
    \draw plot[smooth] (\x,{(1*(1-exp(-0.7*(\x*2-1))))^2+0.3}){};
}{
  \end{tikzpicture}
}
%    \end{macrocode}
% \clearpage
% \appendix
% \part{Appendix}
% \section{Known Bugs}
% This should be a list of (serious) bugs. Please report any of them to me!
% \begin{itemize}
% \item wtf is wrong with the index?!
% \item MOT beams should be aligned and all at same hight
% \item offset in Lennard-Jones potential has to be removed. No idea what is going wrong there
% \end{itemize}
% \section{todo – missing features}
% Here a section with some ideas that could be implemented.
% \begin{itemize}
% \item do labels using the label mechanism of tizk instead of stupidly llap (but how – tikz example on p. 42 does not work!)
% \item free positioning of levels (length, horizontal pos)
% \item sublevels cannot have labels -> give sublevels as pairs, not only numbers ?
% \item pump beams for laser transitions
% \item levels of a LED (solid state energy levels)
% \item how about some axes with cool features?
% \item change transition position to a float-kind of object (use  (what?)
% \item Feshbach resonances
% \item something for “cascades“, i.\,e. falling over several levels or many levels falling on the same – so to save keystrokes etc.
% \item implement colors (e.\,g. Na, Li)
% \item implement whole correct hyperfine schemes (data?!)
% \item …
% \end{itemize}
% \newpage
% \PrintIndex
% \iffalse
%</levelscheme>
% \fi
% \Finale
\endinput